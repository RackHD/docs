RackHD Introduction
===================
In a Converged Infrastructure Platform (CIP) architecture, RackHD software provides hardware management and orchestration (M&O). It serves as an abstraction layer between other M&O layers and the underlying physical hardware. Developers can use the RackHD API to create a user interface that serves as single point of access for managing hardware services regardless of the specific hardware in place.

Once RackHD is installed on the managed CIP platform, it has the ability to discover the existing hardware resources, catalog each component, and retrieve detailed telemetry information from each resource. The retrieved information can then be used to perform low-level hardware management functions for each resource, such as BIOS configuration, OS installation, and firmware management.

RackHD sits between the other M&O layers and the underlying physical hardware devices. User interfaces at the higher M&O layers can request hardware services from RackHD. RackHD handles the details of connecting to and managing the hardware devices.

Management Paradigm
----------------------------
RackHD uses the concept of a ‘neighborhood’ to represent the compute nodes, storage nodes, network switches, and smart PDUs under management. In most cases, a neighborhood corresponds to one physical rack, although a neighborhood can span several racks. The physical compute, storage, and network devices in a neighborhood are logically represented as ‘elements’. For example, a compute element can represent a CPU, while a storage element might refer to a storage disk.
Elements can be managed as separate entities or they can be combined and managed as one larger entity. For example, multiple storage elements can be combined to create a single storage pool.

Hardware Management
---------------------------

To implement the API requests received from the other M&O layers, RackHD primarily uses out-of-band network management to communicate with hardware devices using platform APIs (IPMI, SNMP, etc.). For functionality that is not available out-of-band, RackHD can communicate with the in-band data network.

Features
------------------------

======================== ============================================================================
Feature                  | Description
======================== ============================================================================
Discovery and Cataloging | Discovers the compute, network, and storage resources and
                         | catalogs their attributes and capabilities.
Telemetry and Genealogy  | Telemetry data includes genealogical details, such as
                         | hardware, revisions, serial numbers, and manufacture date.
Device Management        | Powers devices on and off. Manages the firmware, power, OS
                         | installation, and base configuration of the resources.
Configuration            | Configures the hardware per application requirements. This
                         | can range from the BIOS configuration on compute devices
                         | to the port configurations in a network switch.
Application Launch       | Launches (or boots) applications across the various nodes
                         | where they are deployed.
Provisioning             | Provisions a node to support the intended application workflow,
                         | for example lays down ESXi from an image repository.
                         | Reprovisions a node to support a different workload, for
                         | example changes the ESXi platform to Bare Metal CentOS.
Firmware Management      | Manages all infrastructure firmware versioning.
Logging                  | Log information can be retrieved for particular elements or
                         | collated into a single timeline for multiple elements within
                         | the management neighborhood.
Environmental Monitoring | Aggregates environmental data from hardware resources. The
                         | data to monitor is configurable and can include power,
                         | component status, fan performance, and other information
                         | provided by the resource.
Fault Detection          | Monitors devices for both hard and soft faults.
                         | Performs suitable responses based on pre-defined policies.
Analytics Data           | Data generated by environmental and fault monitoring can be
                         | provided to analytic tools for analysis, particularly around
                         | predictive failure.
======================== ============================================================================




Goals
-----------------------------------------

The primary goals of RackHD are to provide REST APIs and live data feeds to enable automated solutions
for managing hardware resources. The technology and architecture are built to provide a platform
agnostic solution.

The combination of these services is intended to provide a REST API based service to:

* Install, configure, and monitor bare metal hardware, such as compute servers, power distribution
  units (PDUs), direct attached extenders (DAE) for storage, and network switches.
* Provision, erase, and reprovision a compute server's OS.
* Install and upgrade firmware for qualified hardware.
* Monitor and alert bare metal hardware through out-of-band management interfaces.
* Provide RESTful APIs for convenient access to knowledge about both common and vendor-specific hardware.
* Provide pub/sub data feeds for alerts and raw telemetry from hardware.

The RackHD Project
-----------------------------------------

RackHD is an open source project available under the Apache 2.0 license (or
compatible sub-licenses for library dependencies). It is housed at https://github.com/RackHD.
The code for RackHD is a combination of Javascript/Node.js and C. The project is a collection
of libraries and applications intended to be deployed together to provide a solution that can be used
either standalone, or as a technology to be included and embedded in larger applications.

The RackHD documentation is also housed on GitHub
and hosted at http://rackhd.readthedocs.org/en/latest/.

Project History
~~~~~~~~~~~~~~~~~~~~~

The project started with the goal of providing a consistent and clear mechanism to perform hardware
inventory and firmware upgrades to commodity white-box servers.
Existing open source solutions do an admirable job of inventory and bare OS provisioning, but the
ability to upgrade firmware was beyond the existing technology stacks readily available. The expansion
to utilizing a event-based workflow engine in alignment with the services providing
classical PXE booting makes it possible to architect a number of different deployment configurations
as described in :doc:`how_it_works` and :doc:`packaging_and_deployment`.
